This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-18T16:37:59.949Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
package.json
postcss.config.js
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.css
src/App.js
src/App.test.js
src/components/Auth.js
src/components/Booking/Booking.js
src/components/card.js
src/components/cardContent.js
src/components/context/AuthContext.js
src/components/Driver/DriverDashboard.js
src/components/Driver/DriverLocationUpdate.js
src/components/ErrorPage.js
src/components/Navbar.js
src/components/Rides/MyRides.js
src/components/Track/Tracking.js
src/components/User/UserProfile.js
src/config/api.js
src/index.css
src/index.js
src/logo.svg
src/Pages/Home.js
src/reportWebVitals.js
src/setupTests.js
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "ride-sharing-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@chakra-ui/react": "^2.10.2",
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@headlessui/react": "^2.1.10",
    "@heroicons/react": "^2.1.5",
    "@react-google-maps/api": "^2.20.3",
    "@react-three/drei": "^9.114.3",
    "@react-three/fiber": "^8.17.10",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "chart.js": "^4.4.5",
    "date-fns": "^4.1.0",
    "framer-motion": "^11.11.9",
    "gsap": "^3.12.5",
    "lucide-react": "^0.453.0",
    "node-cron": "^3.0.3",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.2.0",
    "react-datepicker": "^7.5.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-router-dom": "^6.27.0",
    "react-scripts": "5.0.1",
    "recharts": "^2.13.0",
    "repopack": "^0.1.43",
    "shadcn-ui": "^0.9.2",
    "socket.io-client": "^4.8.0",
    "swiper": "^11.1.14",
    "three": "^0.169.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&display=swap" rel="stylesheet">
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar';
import Home from './Pages/Home';
import Auth from './components/Auth';
import BookingComponent from './components/Booking/Booking';
import TrackingComponent from './components/Track/Tracking';
import UserProfile from './components/User/UserProfile';
import DriverDashboard from './components/Driver/DriverDashboard';
import AdminDashboardComponent from './components/Admin/AdminDashboard';
import MyRides from './components/Rides/MyRides';
import ErrorPage from './components/ErrorPage';
import { AuthProvider, useAuth } from './components/context/AuthContext';
import DriverLocationUpdate from './components/Driver/DriverLocationUpdate';

const ProtectedRoute = ({ children, allowedRoles }) => {
  const { user } = useAuth();
  if (!user) {
    return <Navigate to="/login" />;
  }
  if (allowedRoles && !allowedRoles.includes(user.role)) {
    return <Navigate to="/error" />;
  }
  return children;
};

function AppRoutes() {
  return (
    <Routes>
      <Route path="/login" element={<Auth />} />
      <Route path="/" element={<ProtectedRoute><Home /></ProtectedRoute>} />
      <Route path="/book" element={<ProtectedRoute allowedRoles={['customer']}><BookingComponent /></ProtectedRoute>} />
      <Route path="/rides" element={<ProtectedRoute allowedRoles={['customer']}><MyRides /></ProtectedRoute>} />
      <Route path="/profile" element={<ProtectedRoute><UserProfile /></ProtectedRoute>} />
      <Route path="/tracking" element={<ProtectedRoute><TrackingComponent /></ProtectedRoute>} />
      <Route path="/driver/dashboard" element={<ProtectedRoute allowedRoles={['driver']}><DriverDashboard /></ProtectedRoute>} />
      <Route path="/driver/update-location" element={<ProtectedRoute allowedRoles={['driver']}><DriverLocationUpdate /></ProtectedRoute>} />
      <Route path="/admin" element={<ProtectedRoute allowedRoles={['admin']}><AdminDashboardComponent /></ProtectedRoute>} />
      <Route path="/error" element={<ErrorPage />} />
    </Routes>
  );
}

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="flex flex-col min-h-screen">
          <Navbar />
          <main className="flex-grow container mx-auto">
            <AppRoutes />
          </main>
          <footer className="bg-gray-200 text-center py-4">
            © 2024 Ride Sharing App. All rights reserved.
          </footer>
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/Auth.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from './context/AuthContext';

const Auth = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    role: 'customer'
  });
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const url = `api/v2/auth/${isLogin ? 'login' : 'signup'}`;
    try {
      const response = await apiCall(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      const data = await response.json();
      if (data.success) {
        // Store user data and token in local storage
        localStorage.setItem('token', data.token);
        localStorage.setItem('user', JSON.stringify(data.user));
        login(data.user);
        navigate('/');
      } else {
        alert(data.message || 'Authentication failed');
      }
    } catch (error) {
      console.error('Auth error:', error);
      alert('An error occurred during authentication');
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-5">{isLogin ? 'Login' : 'Sign Up'}</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        {!isLogin && (
          <input
            type="text"
            name="username"
            placeholder="Username"
            value={formData.username}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        )}
        <input
          type="email"
          name="email"
          placeholder="Email"
          value={formData.email}
          onChange={handleChange}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="password"
          name="password"
          placeholder="Password"
          value={formData.password}
          onChange={handleChange}
          className="w-full p-2 border rounded"
          required
        />
        {!isLogin && (
          <select
            name="role"
            value={formData.role}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          >
            <option value="customer">Customer</option>
            <option value="driver">Driver</option>
          </select>
        )}
        <button type="submit" className="w-full p-2 bg-blue-500 text-white rounded">
          {isLogin ? 'Login' : 'Sign Up'}
        </button>
      </form>
      <p className="mt-4 text-center">
        {isLogin ? "Don't have an account? " : "Already have an account? "}
        <button onClick={() => setIsLogin(!isLogin)} className="text-blue-500">
          {isLogin ? 'Sign Up' : 'Login'}
        </button>
      </p>
    </div>
  );
};

export default Auth;

================
File: src/components/Booking/Booking.js
================
import React, { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import { io } from 'socket.io-client';
import DatePicker from 'react-datepicker'; // You'll need to install this package
import "react-datepicker/dist/react-datepicker.css";

const API_KEY = 'AlzaSy3h_O_Xdl_y_uwhT5NDv3xwYzVvmgbvXvu'; // Replace with your actual API key

const BookingComponent = () => {
  const mapRef = useRef(null);
  const originInputRef = useRef(null);
  const destinationInputRef = useRef(null);

  const [map, setMap] = useState(null);
  const [directionsService, setDirectionsService] = useState(null);
  const [directionsRenderer, setDirectionsRenderer] = useState(null);
  const [distance, setDistance] = useState('');
  const [duration, setDuration] = useState('');
  const [estimatedPrice, setEstimatedPrice] = useState(0);
  const [drivers, setDrivers] = useState([]);
  const [vehicles, setVehicles] = useState([]);
  const [selectedDriver, setSelectedDriver] = useState('');
  const [selectedVehicle, setSelectedVehicle] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [userPrice, setUserPrice] = useState('');
  const [bookingId, setBookingId] = useState(null);
  const [currentLocation, setCurrentLocation] = useState(null);
  const [socket, setSocket] = useState(null);
  const [error, setError] = useState(null);
  const [matchedDriver, setMatchedDriver] = useState(null);
  const [selectionMode, setSelectionMode] = useState('manual'); // 'manual' or 'automated'
  const [isScheduleFuture, setIsScheduleFuture] = useState(false);
  const [scheduleDate, setScheduleDate] = useState('');
  const [scheduleTime, setScheduleTime] = useState('');


  useEffect(() => {
    loadGoogleMapsScript();
    initializeSocket();
    fetchVehicles();
    return () => {
      if (socket) {
        socket.disconnect();
      }
    };
  }, []);

  const loadGoogleMapsScript = () => {
    const script = document.createElement('script');
    script.src = `https://maps.gomaps.pro/maps/api/js?key=${API_KEY}&libraries=places`;
    script.async = true;
    script.defer = true;
    script.onload = initMap;
    document.head.appendChild(script);
  };
  const getTomorrowDate = () => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toISOString().split('T')[0];
  };
  useEffect(() => {
    setScheduleDate(getTomorrowDate());
  }, []);

  const initMap = () => {
    const mapInstance = new window.google.maps.Map(mapRef.current, {
      center: { lat: 40.7128, lng: -74.0060 }, // New York coordinates
      zoom: 13
    });

    const directionsServiceInstance = new window.google.maps.DirectionsService();
    const directionsRendererInstance = new window.google.maps.DirectionsRenderer();

    directionsRendererInstance.setMap(mapInstance);

    setMap(mapInstance);
    setDirectionsService(directionsServiceInstance);
    setDirectionsRenderer(directionsRendererInstance);

    const originAutocomplete = new window.google.maps.places.Autocomplete(originInputRef.current);
    const destinationAutocomplete = new window.google.maps.places.Autocomplete(destinationInputRef.current);

    originAutocomplete.addListener('place_changed', () => {
      const place = originAutocomplete.getPlace();
      if (place.geometry) {
        originInputRef.current.coordinates = {
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };
      }
    });

    destinationAutocomplete.addListener('place_changed', () => {
      const place = destinationAutocomplete.getPlace();
      if (place.geometry) {
        destinationInputRef.current.coordinates = {
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };
      }
    });
  };

  const initializeSocket = () => {
    const newSocket = io('https://fleet-track-dynamics-atlan-production.up.railway.app', {
      query: { token: localStorage.getItem('token') }
    });
    setSocket(newSocket);

    newSocket.on('locationUpdate', (location) => {
      setCurrentLocation(location);
      updateMarkerPosition(location);
    });

    newSocket.on('rideCompleted', () => {
      alert('Your ride has been completed!');
      setBookingId(null);
    });
  };

  const fetchVehicles = async () => {
    try {
      const response = await apiCall('api/v2/vehicles', {
        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch vehicles');
      }

      const data = await response.json();
      setVehicles(data.vehicles);
    } catch (error) {
      console.error('Error fetching vehicles:', error);
      setError('Failed to load vehicles. Please try again.');
    }
  };

  const fetchDrivers = async () => {
    try {
      const response = await apiCall('api/v2/drivers', {
        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch drivers');
      }

      const data = await response.json();
      setDrivers(data.drivers);
    } catch (error) {
      console.error('Error fetching drivers:', error);
      setError('Failed to load drivers. Please try again.');
    }
  };

  const calculateRoute = () => {
    setIsLoading(true);
    setError(null);
    const origin = originInputRef.current.value;
    const destination = destinationInputRef.current.value;

    if (!origin || !destination || !selectedVehicle) {
      setError("Please enter origin, destination, and select a vehicle");
      setIsLoading(false);
      return;
    }

    const request = {
      origin: origin,
      destination: destination,
      travelMode: 'DRIVING'
    };

    directionsService.route(request, (result, status) => {
      if (status === 'OK') {
        directionsRenderer.setDirections(result);
        const route = result.routes[0];
        setDistance(route.legs[0].distance.text);
        setDuration(route.legs[0].duration.text);
        estimatePrice(route.legs[0].distance.value / 1000);
      } else {
        setError("Couldn't calculate route. Please try again.");
      }
      setIsLoading(false);
    });
  };

  const estimatePrice = (distance) => {
    const selectedVehicleObj = vehicles.find(v => v._id === selectedVehicle);
    const basePrice = 5;
    const pricePerKm = selectedVehicleObj ? getPricePerKm(selectedVehicleObj.vehicleType) : 0.5;
    const price = basePrice + (distance * pricePerKm);
    setEstimatedPrice(price.toFixed(2));
    setUserPrice(price.toFixed(2));
  };

  const getPricePerKm = (vehicleType) => {
    switch (vehicleType) {
      case 'sedan': return 0.5;
      case 'suv': return 0.7;
      case 'van': return 0.8;
      case 'truck': return 0.9;
      default: return 0.5;
    }
  };

  const findMatchingDriver = async () => {
    setIsLoading(true);
    setError(null);
    try {
      if (!originInputRef.current.coordinates) {
        throw new Error('Please select a valid origin from the dropdown');
      }

      const response = await apiCall('api/v2/bookings/match', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({
          userId: localStorage.getItem('userId'),
          pickup: {
            address: originInputRef.current.value,
            coordinates: originInputRef.current.coordinates
          },
          vehicleId: selectedVehicle
        }),
      });

      if (!response.ok) {
        throw new Error('Matching failed');
      }

      const data = await response.json();
      if (data.success) {
        setMatchedDriver(data.driver);
        setSelectedDriver(data.driver._id);
        alert("Driver matched successfully!");
      } else {
        throw new Error(data.message || 'Matching failed');
      }
    } catch (error) {
      setError("Failed to find matching driver: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const bookRide = async () => {
    setIsLoading(true);
    setError(null);
    const origin = originInputRef.current.value;
    const destination = destinationInputRef.current.value;
  
    if (!origin || !destination || !selectedVehicle || (!selectedDriver && selectionMode === 'manual') || (!matchedDriver && selectionMode === 'automated')) {
      setError("Please fill in all required fields");
      setIsLoading(false);
      return;
    }
  
    if (!originInputRef.current.coordinates || !destinationInputRef.current.coordinates) {
      setError("Please select valid locations for both origin and destination");
      setIsLoading(false);
      return;
    }
  
    const finalPrice = parseFloat(userPrice);
    if (isNaN(finalPrice) || finalPrice < parseFloat(estimatedPrice)) {
      setError("Please enter a valid price (must be >= estimated price).");
      setIsLoading(false);
      return;
    }
  
    try {
      const bookingData = {
        userId: localStorage.getItem('userId'),
        driverId: selectionMode === 'manual' ? selectedDriver : matchedDriver._id,
        vehicleId: selectedVehicle,
        pickup: {
          address: origin,
          coordinates: originInputRef.current.coordinates
        },
        dropoff: {
          address: destination,
          coordinates: destinationInputRef.current.coordinates
        },
        price: finalPrice
      };
  
      if (isScheduleFuture) {
        if (!scheduleDate || !scheduleTime) {
          setError("Please select both date and time for future booking.");
          setIsLoading(false);
          return;
        }
        const scheduledDateTime = new Date(`${scheduleDate}T${scheduleTime}`);
        bookingData.scheduledTime = scheduledDateTime.toISOString();
      }
  
      const endpoint = isScheduleFuture ? 'api/v2/bookings/future' : 'api/v2/bookings';
  
      const response = await apiCall(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify(bookingData),
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Booking failed');
      }
  
      const data = await response.json();
      if (data.success) {
        alert(`Ride ${isScheduleFuture ? 'scheduled' : 'booked'} successfully! Booking ID: ${data.booking._id}`);
        setBookingId(data.booking._id);
      } else {
        throw new Error(data.message || 'Booking failed');
      }
    } catch (error) {
      setError(`Failed to ${isScheduleFuture ? 'schedule' : 'book'} ride: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };



  const updateMarkerPosition = (location) => {
    if (map && location) {
      const latLng = new window.google.maps.LatLng(location.lat, location.lng);
      
      if (!mapRef.current.marker) {
        mapRef.current.marker = new window.google.maps.Marker({
          map: map,
          position: latLng
        });
      } else {
        mapRef.current.marker.setPosition(latLng);
      }
      
      map.panTo(latLng);
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      <div className="w-1/3 p-6 overflow-y-auto">
        <h1 className="text-3xl font-bold mb-6">Book a Ride</h1>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        
        <select 
          value={selectedVehicle} 
          onChange={(e) => setSelectedVehicle(e.target.value)}
          className="w-full p-2 mb-4 border rounded"
        >
          <option value="">Select a vehicle</option>
          {vehicles.map(vehicle => (
            <option key={vehicle._id} value={vehicle._id}>{vehicle.make} {vehicle.model} ({vehicle.vehicleType})</option>
          ))}
        </select>

        <input ref={originInputRef} type="text" placeholder="Enter origin" className="w-full p-2 mb-4 border rounded" />
        <input ref={destinationInputRef} type="text" placeholder="Enter destination" className="w-full p-2 mb-4 border rounded" />
        
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={calculateRoute}
          className="w-full p-2 mb-4 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300"
          disabled={isLoading}
        >
          {isLoading ? 'Calculating...' : 'Calculate Route'}
        </motion.button>
        
        {distance && duration && (
          <div className="mb-4">
            <p className="font-semibold">Distance: {distance}</p>
            <p className="font-semibold">Duration: {duration}</p>
            <p className="font-semibold">Estimated Price: ${estimatedPrice}</p>
            <input
              type="number"
              value={userPrice}
              onChange={(e) => setUserPrice(e.target.value)}
              min={estimatedPrice}
              step="0.01"
              className="w-full p-2 mt-2 border rounded"
              placeholder="Enter price (must be >= estimated price)"
            />
          </div>
        )}

        <div className="mb-4">
          <label className="block mb-2">Selection Mode:</label>
          <div className="flex justify-between">
            <button
              onClick={() => { setSelectionMode('manual'); fetchDrivers(); }}
              className={`w-1/2 p-2 ${selectionMode === 'manual' ? 'bg-blue-500 text-white' : 'bg-gray-200'} rounded-l`}
            >
              Manual
            </button>
            <button
              onClick={() => setSelectionMode('automated')}
              className={`w-1/2 p-2 ${selectionMode === 'automated' ? 'bg-blue-500 text-white' : 'bg-gray-200'} rounded-r`}
            >
              Automated
            </button>
          </div>
        </div>

        {selectionMode === 'manual' && (
          <select 
            value={selectedDriver} 
            onChange={(e) => setSelectedDriver(e.target.value)}
            className="w-full p-2 mb-4 border rounded"
          >
            <option value="">Select a driver</option>
            {drivers.map(driver => (
              <option key={driver._id} value={driver._id}>{driver.username}</option>
            ))}
          </select>
        )}

        {selectionMode === 'automated' && (
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={findMatchingDriver}
            className="w-full p-2 mb-4 bg-green-500 text-white rounded hover:bg-green-600 transition duration-300"
            disabled={isLoading}
          >
            {isLoading ? 'Finding Driver...' : 'Find Matching Driver'}
          </motion.button>
        )}

        {selectionMode === 'automated' && matchedDriver && (
          <div className="mb-4 p-4 bg-blue-100 rounded">
            <h2 className="font-bold text-lg mb-2">Matched Driver</h2>
            <p>Name: {matchedDriver.username}</p>
            <p>Location: {matchedDriver.currentLocation.coordinates[1]}, {matchedDriver.currentLocation.coordinates[0]}</p>
          </div>
        )}

       
        <div className="mb-4">
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={isScheduleFuture}
              onChange={(e) => setIsScheduleFuture(e.target.checked)}
              className="mr-2"
            />
            Schedule for later
          </label>
        </div>
        
        {isScheduleFuture && (
          <div className="mb-4">
            <input
              type="date"
              value={scheduleDate}
              onChange={(e) => setScheduleDate(e.target.value)}
              min={getTomorrowDate()} // Prevent selecting dates before tomorrow
              className="w-full p-2 mb-2 border rounded"
            />
            <input
              type="time"
              value={scheduleTime}
              onChange={(e) => setScheduleTime(e.target.value)}
              className="w-full p-2 border rounded"
            />
          </div>
        )}

        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={bookRide}
          className="w-full p-2 bg-green-500 text-white rounded hover:bg-green-600 transition duration-300"
          disabled={isLoading || (selectionMode === 'automated' && !matchedDriver) || !selectedVehicle}
        >
          {isLoading ? 'Booking...' : isScheduleFuture ? 'Schedule Ride' : 'Book Now'}
        </motion.button>

      </div>
      <div className="w-2/3" ref={mapRef}></div>
    </div>
  );
};

export default BookingComponent;

================
File: src/components/card.js
================
// src/components/ui/card.js

import React from 'react';

const Card = ({ children, className }) => {
  return (
    <div className={`bg-white shadow-md rounded-lg p-4 ${className}`}>
      {children}
    </div>
  );
};

export default Card;

================
File: src/components/cardContent.js
================
// src/components/ui/cardContent.js


export const CardContent = ({ children }) => {
  return <div className="p-4">{children}</div>;
};

// src/components/ui/cardHeader.js


export const CardHeader = ({ children }) => {
  return <div className="border-b pb-2">{children}</div>;
};

// src/components/ui/cardTitle.js


export const CardTitle = ({ children }) => {
  return <h2 className="text-lg font-semibold">{children}</h2>;
};

// src/components/ui/cardDescription.js


export const CardDescription = ({ children }) => {
  return <p className="text-sm text-gray-600">{children}</p>;
};

// src/components/ui/cardFooter.js


export const CardFooter = ({ children }) => {
  return <div className="border-t pt-2">{children}</div>;
};

================
File: src/components/context/AuthContext.js
================
import React, { createContext, useState, useEffect, useContext } from 'react';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const storedUser = JSON.parse(localStorage.getItem('user'));
    if (storedUser) {
      setUser(storedUser);
    }
  }, []);

  const login = (userData) => {
    setUser(userData);
    localStorage.setItem('user', JSON.stringify(userData));
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
    localStorage.removeItem('token');
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

================
File: src/components/Driver/DriverDashboard.js
================
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { Bar, Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement);

const DriverDashboard = () => {
  const [jobs, setJobs] = useState({
    active: [],
    pending: [],
    incoming: []
  });
  const [isAvailable, setIsAvailable] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('active');
  const [analytics, setAnalytics] = useState({
    totalEarnings: 0,
    completedJobs: 0,
    averageRating: 0,
    jobStatusDistribution: {}
  });

  const user = JSON.parse(localStorage.getItem('user'));
  const { id: driverId, email: driverEmail } = user;

  useEffect(() => {
    fetchDriverInfo();
    fetchJobs();
    const interval = setInterval(fetchJobs, 30000);
    return () => clearInterval(interval);
  }, []);

  const fetchDriverInfo = async () => {
    try {
      const response = await apiCall(`api/v2/drivers/${driverId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      if (!response.ok) throw new Error('Failed to fetch driver info');
      const data = await response.json();
      setIsAvailable(data.driver.isAvailable);
    } catch (error) {
      console.error('Error fetching driver info:', error);
      setError('Failed to load driver information');
    }
  };

  const fetchJobs = async () => {
    try {
        const response = await apiCall('api/v2/drivers/current-jobs', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({ email: driverEmail })
        });
        if (!response.ok) throw new Error('Failed to fetch jobs');
        const data = await response.json();
        
        const active = data.bookings.filter(job => ['en_route', 'goods_collected'].includes(job.status));
        const pending = data.bookings.filter(job => job.status === 'pending');
        const incoming = data.bookings.filter(job => job.status === 'assigned');
        
        setJobs({ active, pending, incoming });
        calculateAnalytics(data.bookings); // Ensure this is called after setting jobs
    } catch (error) {
        console.error('Error fetching jobs:', error);
        setError('Failed to load jobs');
    } finally {
        setLoading(false);
    }
};


  const calculateAnalytics = (bookings) => {
    const completedJobs = bookings.filter(job => job.status === 'completed');
    const totalEarnings = completedJobs.reduce((sum, job) => sum + job.price, 0);
    
    const jobStatusDistribution = bookings.reduce((acc, job) => {
        acc[job.status] = (acc[job.status] || 0) + 1;
        return acc;
    }, {});

    setAnalytics({
        totalEarnings,
        completedJobs: completedJobs.length,
        averageRating: 4.5, // Placeholder, as we don't have this data
        jobStatusDistribution
    });
};

const barChartData = {
  labels: ['Total Earnings', 'Completed Jobs'],
  datasets: [
      {
          label: 'Total Earnings',
          data: [analytics.totalEarnings, 0], // 0 for completed jobs on this dataset
          backgroundColor: '#007A5E', // Emerald Green
          yAxisID: 'earnings', // Use the earnings y-axis
      },
      {
          label: 'Completed Jobs',
          data: [0, analytics.completedJobs], // 0 for earnings on this dataset
          backgroundColor: '#D4AF37', // Royal Gold
          yAxisID: 'jobs', // Use the jobs y-axis
      },
  ],
};

// Bar Chart Options with Dual Axes
const barChartOptions = {
  scales: {
      earnings: {
          type: 'linear',
          position: 'left',
          ticks: {
              callback: (value) => `$${value}`, // Format for earnings
          },
          title: {
              display: true,
              text: 'Total Earnings ($)',
          },
      },
      jobs: {
          type: 'linear',
          position: 'right',
          ticks: {
              beginAtZero: true,
          },
          title: {
              display: true,
              text: 'Completed Jobs',
          },
          grid: {
              drawOnChartArea: false, // Don't draw grid lines for the right axis
          },
      },
  },
};

 
  const toggleAvailability = async () => {
    try {
      const response = await apiCall(`api/v2/drivers/${driverId}/availability`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ isAvailable: !isAvailable })
      });
      if (!response.ok) throw new Error('Failed to update availability');
      const data = await response.json();
      setIsAvailable(data.driver.isAvailable);
    } catch (error) {
      console.error('Error updating availability:', error);
      alert('Failed to update availability');
    }
  };

  const updateJobStatus = async (jobId, newStatus) => {
    try {
      const response = await apiCall(`api/v2/drivers/jobs/${jobId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ status: newStatus })
      });
      if (!response.ok) throw new Error('Failed to update job status');
      fetchJobs(); // Refresh the jobs list
    } catch (error) {
      console.error('Error updating job status:', error);
      alert('Failed to update job status');
    }
  };

  const acceptJob = async (jobId) => {
    try {
      const response = await apiCall(`api/v2/drivers/jobs/${jobId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ status: 'assigned' })
      });
      if (!response.ok) throw new Error('Failed to accept job');
      fetchJobs(); // Refresh the jobs list
    } catch (error) {
      console.error('Error accepting job:', error);
      alert('Failed to accept job');
    }
  };

  if (loading) return <div className="flex justify-center items-center h-screen">Loading...</div>;
  if (error) return <div className="flex justify-center items-center h-screen text-red-500">Error: {error}</div>;

  const JobCard = ({ job, isActive, isPending }) => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className="bg-white shadow-lg rounded-lg p-6 mb-4"
    >
      <h3 className="text-xl font-semibold mb-2">Booking ID: {job._id}</h3>
      <p className="mb-1"><strong>Pickup:</strong> {job.pickup.address}</p>
      <p className="mb-1"><strong>Dropoff:</strong> {job.dropoff.address}</p>
      <p className="mb-2"><strong>Status:</strong> {job.status}</p>
      <p className="mb-2"><strong>Price:</strong> ${job.price.toFixed(2)}</p>
     
      {isActive && (
        <div className="flex space-x-2 mt-4">
          <button 
            onClick={() => updateJobStatus(job._id, 'en_route')}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition duration-300"
          >
            En Route
          </button>
          <button 
            onClick={() => updateJobStatus(job._id, 'goods_collected')}
            className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 transition duration-300"
          >
            Goods Collected
          </button>
          <button 
            onClick={() => updateJobStatus(job._id, 'completed')}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition duration-300"
          >
            Complete
          </button>
        </div>
      )}
      {isPending && (
        <button 
          onClick={() => acceptJob(job._id)}
          className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition duration-300 mt-4"
        >
          Accept Request
        </button>
      )}
    </motion.div>
  );

  const statusColors = {
    pending: '#FFA500',
    assigned: '#4169E1',
    en_route: '#32CD32',
    goods_collected: '#9370DB',
    completed: '#228B22'
  };

  const pieChartData = {
    labels: Object.keys(analytics.jobStatusDistribution),
    datasets: [
      {
        data: Object.values(analytics.jobStatusDistribution),
        backgroundColor: Object.keys(analytics.jobStatusDistribution).map(status => statusColors[status] || '#000000'),
      },
    ],
  };

  return (
    <div className="container mx-auto p-8 bg-gray-100 min-h-screen">
      <motion.h1 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-4xl font-bold mb-8 text-center text-gray-800"
      >
        Driver Dashboard
      </motion.h1>
      
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="mb-8 flex justify-center"
      >
        <button 
          onClick={toggleAvailability}
          className={`px-6 py-3 rounded-full text-lg font-semibold transition duration-300 ${
            isAvailable 
              ? 'bg-green-500 hover:bg-green-600 text-white' 
              : 'bg-red-500 hover:bg-red-600 text-white'
          }`}
        >
          {isAvailable ? 'Available for Jobs' : 'Not Available'}
        </button>
      </motion.div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
        <div className="bg-white p-6 rounded-lg shadow-lg">
          <h2 className="text-2xl font-semibold mb-4">Job Status Distribution</h2>
          <Pie data={pieChartData} />
        </div>
        <div className="bg-white p-6 rounded-lg shadow-lg">
          <h2 className="text-2xl font-semibold mb-4">Performance Metrics</h2>
          <Bar data={barChartData} options={barChartOptions} />
          </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
        <div className="bg-white p-6 rounded-lg shadow-lg text-center">
          <h3 className="text-xl font-semibold mb-2">Total Earnings</h3>
          <p className="text-3xl font-bold text-green-600">${analytics.totalEarnings.toFixed(2)}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-lg text-center">
          <h3 className="text-xl font-semibold mb-2">Completed Jobs</h3>
          <p className="text-3xl font-bold text-blue-600">{analytics.completedJobs}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-lg text-center">
          <h3 className="text-xl font-semibold mb-2">Average Rating</h3>
          <p className="text-3xl font-bold text-yellow-600">{analytics.averageRating.toFixed(1)}</p>
        </div>
      </div>

      <div className="mb-8">
        <div className="flex justify-center space-x-4 mb-4">
          {['active', 'pending', 'incoming'].map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-4 py-2 rounded-full transition duration-300 ${
                activeTab === tab
                  ? 'bg-blue-500 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              {tab.charAt(0).toUpperCase() + tab.slice(1)} Jobs
            </button>
          ))}
        </div>

        <AnimatePresence mode="wait">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3 }}
          >
            {jobs[activeTab].length === 0 ? (
              <p className="text-center text-gray-600">No {activeTab} jobs at the moment.</p>
            ) : (
              jobs[activeTab].map(job => (
                <JobCard 
                  key={job._id} 
                  job={job} 
                  isActive={activeTab === 'active' || activeTab === 'incoming'} 
                  isPending={activeTab === 'pending'}
                />
              ))
            )}
          </motion.div>
        </AnimatePresence>
      </div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex justify-center space-x-4"
      >
        <Link to="/vehicles" className="bg-blue-500 text-white px-6 py-3 rounded-full hover:bg-blue-600 transition duration-300">
          Manage Vehicles
        </Link>
        <Link to="/profile" className="bg-gray-500 text-white px-6 py-3 rounded-full hover:bg-gray-600 transition duration-300">
          View Profile
        </Link>
      </motion.div>
    </div>
  );
};

export default DriverDashboard;

================
File: src/components/Driver/DriverLocationUpdate.js
================
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';

const API_KEY = 'AlzaSy3h_O_Xdl_y_uwhT5NDv3xwYzVvmgbvXvu'; // Replace with your actual API key

const DriverLocationUpdate = () => {
  const [address, setAddress] = useState('');
  const [location, setLocation] = useState(null);
  const [bookings, setBookings] = useState([]);
  const [selectedBooking, setSelectedBooking] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const autocompleteRef = useRef(null);
  const navigate = useNavigate();
  const driverId = JSON.parse(localStorage.getItem('user')).id;
  const driverEmail = JSON.parse(localStorage.getItem('user')).email;
  useEffect(() => {
    fetchCurrentJobs();
    loadGoogleMapsScript();
  }, []);

  const fetchCurrentJobs = async () => {
    try {
      const response = await apiCall('api/v2/drivers/current-jobs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ email: driverEmail })
      });
      if (!response.ok) throw new Error('Failed to fetch current jobs');
      const data = await response.json();
      setBookings(data.bookings);
    } catch (error) {
      console.error('Error fetching current jobs:', error);
      setError('Failed to load current jobs');
    } finally {
      setLoading(false);
    }
  };

  const loadGoogleMapsScript = () => {
    const script = document.createElement('script');
    script.src = `https://maps.gomaps.pro/maps/api/js?key=${API_KEY}&libraries=places`;
    script.async = true;
    script.onload = initAutocomplete;
    document.body.appendChild(script);

    return () => {
      document.body.removeChild(script);
    };
  };

  const initAutocomplete = () => {
    autocompleteRef.current = new window.google.maps.places.Autocomplete(
      document.getElementById('location-input')
    );
    autocompleteRef.current.addListener('place_changed', handlePlaceSelect);
  };

  const handlePlaceSelect = () => {
    const place = autocompleteRef.current.getPlace();
    if (place.geometry) {
        const lat = place.geometry.location.lat();
        const lng = place.geometry.location.lng();
        
        setLocation({
            lat: lat,
            lng: lng
        });
        setAddress(place.formatted_address);

        // Alert the coordinates
        alert(`Selected Location Coordinates:\nLatitude: ${lat}\nLongitude: ${lng}`);
    }
};



  
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!location || !driverId) return;

    try {
      const response = await apiCall(`api/v2/drivers/update-location/${driverId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({
          latitude: location.lat,
          longitude: location.lng
        })
      });

      if (!response.ok) throw new Error('Failed to update location');

      const data = await response.json();
      alert('Location updated successfully!');
      navigate('/driver/dashboard');
    } catch (error) {
      console.error('Error updating location:', error);
      alert('Failed to update location. Please try again.');
    }
};

  

  return (
    <div className="p-4 max-w-md mx-auto">
      <h2 className="text-2xl font-bold mb-4">Update Your Location</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="booking-select" className="block mb-2">Select Booking:</label>
          <select
            id="booking-select"
            value={selectedBooking}
            onChange={(e) => setSelectedBooking(e.target.value)}
            className="w-full p-2 border rounded"
            required
          >
            <option value="">Select a booking</option>
            {bookings.map((booking) => (
              <option key={booking._id} value={booking._id}>
                {booking._id} - {booking.pickup.address} to {booking.dropoff.address}
              </option>
            ))}
          </select>
        </div>
        <div>
          <label htmlFor="location-input" className="block mb-2">Current Location:</label>
          <input
            id="location-input"
            type="text"
            value={address}
            onChange={(e) => setAddress(e.target.value)}
            placeholder="Enter your current location"
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <button 
          type="submit" 
          className="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition duration-200"
          disabled={!location || !selectedBooking}
        >
          Update Location
        </button>
      </form>
    </div>
  );
};

export default DriverLocationUpdate;

================
File: src/components/ErrorPage.js
================
import React from 'react';
import { useLocation, Link } from 'react-router-dom';

const ErrorPage = () => {
  const location = useLocation();
  const message = location.state?.message || "An error occurred";

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <h1 className="text-4xl font-bold mb-4">Oops!</h1>
      <p className="text-xl mb-8">{message}</p>
      <Link to="/" className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Go Home
      </Link>
    </div>
  );
};

export default ErrorPage;

================
File: src/components/Navbar.js
================
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from './context/AuthContext';

function Navbar() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  if (!user) return null;

  return (
    <nav className="bg-blue-600 text-white shadow-lg">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center py-4">
          <Link to="/" className="text-2xl font-bold">
            Ride Sharing
          </Link>
          <div className="space-x-4">
            <Link to="/" className="hover:text-blue-200">Home</Link>
            {user.role === 'customer' && (
              <>
                <Link to="/book" className="hover:text-blue-200">Book a Ride</Link>
                <Link to="/rides" className="hover:text-blue-200">My Rides</Link>
              </>
            )}
            {user.role === 'driver' && (
              <>
                <Link to="/driver/dashboard" className="hover:text-blue-200">Driver Dashboard</Link>
                <Link to="/driver/update-location" className="hover:text-blue-200">Update Location</Link>
                <Link to="/vehicles" className="hover:text-blue-200">Vehicle Management</Link>
              </>
            )}
            {user.role === 'admin' && (
              <Link to="/admin" className="hover:text-blue-200">Admin Dashboard</Link>
            )}
            <Link to="/profile" className="hover:text-blue-200">Profile</Link>
            <Link to="/tracking" className="hover:text-blue-200">Track Ride</Link>
          </div>
          <button onClick={handleLogout} className="bg-white text-blue-600 px-4 py-2 rounded hover:bg-blue-100">
            Log Out
          </button>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;

================
File: src/components/Rides/MyRides.js
================
import React, { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { motion } from 'framer-motion';
import { MapPin, Calendar, Clock, Truck, User, DollarSign, Tag } from 'lucide-react';

const UserBookings = () => {
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    fetchUserBookings();
  }, []);

  const fetchUserBookings = async () => {
    try {
      setLoading(true);
      const userEmail = localStorage.getItem('email');

      if (!userEmail) {
        setError('User email not found. Please log in again.');
        setLoading(false);
        return;
      }

      const response = await apiCall('api/v2/bookings/userbookings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ email: userEmail })
      });

      const data = await response.json();
      if (data.success) {
        setBookings(data.bookings);
      } else {
        setError(data.message || 'Failed to fetch bookings');
      }
    } catch (error) {
      setError('Error fetching bookings. Please try again later.');
      console.error('Error fetching bookings:', error);
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'completed': return 'bg-green-100 text-green-800 border-green-300';
      case 'cancelled': return 'bg-red-100 text-red-800 border-red-300';
      case 'scheduled': return 'bg-blue-100 text-blue-800 border-blue-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const formatDate = (dateString) => {
    return format(new Date(dateString), "MMMM d, yyyy 'at' h:mm a");
  };

  const filteredBookings = bookings.filter(booking => 
    filter === 'all' || booking.status === filter
  );

  if (loading) return (
    <div className="flex justify-center items-center h-screen">
      <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );

  if (error) return (
    <div className="text-center mt-8 text-red-600 bg-red-100 p-4 rounded-lg shadow">
      <h2 className="text-xl font-bold mb-2">Error</h2>
      <p>{error}</p>
    </div>
  );

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8 text-center text-gray-800">My Rides</h1>
      
      <div className="mb-6 flex justify-center space-x-2">
        {['all', 'pending', 'completed', 'cancelled', 'scheduled'].map((status) => (
          <button
            key={status}
            onClick={() => setFilter(status)}
            className={`px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 ${
              filter === status
                ? 'bg-blue-500 text-white'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            {status.charAt(0).toUpperCase() + status.slice(1)}
          </button>
        ))}
      </div>

      {filteredBookings.length === 0 ? (
        <p className="text-center text-gray-600 text-lg">No bookings found for the selected filter.</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredBookings.map((booking, index) => (
            <motion.div
              key={booking._id}
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="bg-white rounded-lg shadow-lg overflow-hidden border border-gray-200 hover:shadow-xl transition-shadow duration-300"
            >
              <div className="px-6 py-4">
                <div className="font-bold text-xl mb-2 text-gray-800">Booking #{booking._id.slice(-6)}</div>
                <div className="space-y-2">
                  <p className="text-gray-700 flex items-center">
                    <MapPin className="mr-2 text-blue-500" size={18} />
                    <span className="font-semibold">From:</span> {booking.pickup.address}
                  </p>
                  <p className="text-gray-700 flex items-center">
                    <MapPin className="mr-2 text-red-500" size={18} />
                    <span className="font-semibold">To:</span> {booking.dropoff.address}
                  </p>
                  <p className="text-gray-700 flex items-center">
                    <User className="mr-2 text-green-500" size={18} />
                    <span className="font-semibold">Driver:</span> {booking.driver.username}
                  </p>
                  <p className="text-gray-700 flex items-center">
                    <Truck className="mr-2 text-purple-500" size={18} />
                    <span className="font-semibold">Vehicle:</span> {booking.vehicle.make} {booking.vehicle.model} ({booking.vehicle.vehicleType})
                  </p>
                  <p className="text-gray-700 flex items-center">
                    <Tag className="mr-2 text-yellow-500" size={18} />
                    <span className="font-semibold">License Plate:</span> {booking.vehicle.licensePlate}
                  </p>
                  <p className="text-gray-700 flex items-center">
                    <DollarSign className="mr-2 text-green-500" size={18} />
                    <span className="font-semibold">Price:</span> ${booking.price.toFixed(2)}
                  </p>
                  <p className="text-gray-700 flex items-center">
                    <Calendar className="mr-2 text-blue-500" size={18} />
                    <span className="font-semibold">Date:</span> {formatDate(booking.createdAt)}
                  </p>
                  {booking.status === 'scheduled' && booking.scheduledTime && (
                    <p className="text-gray-700 flex items-center">
                      <Clock className="mr-2 text-indigo-500" size={18} />
                      <span className="font-semibold">Scheduled:</span> {formatDate(booking.scheduledTime)}
                    </p>
                  )}
                </div>
              </div>
              <div className="px-6 pt-4 pb-2">
                <span className={`inline-block rounded-full px-3 py-1 text-sm font-semibold ${getStatusColor(booking.status)}`}>
                  {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                </span>
              </div>
            </motion.div>
          ))}
        </div>
      )}
    </div>
  );
};

export default UserBookings;

================
File: src/components/Track/Tracking.js
================
import React, { useState, useEffect, useRef } from 'react';
import { io } from 'socket.io-client';

const API_KEY = 'AlzaSy3h_O_Xdl_y_uwhT5NDv3xwYzVvmgbvXvu'; // Replace with your actual API key

const TrackingComponent = () => {
  const [bookingId, setBookingId] = useState('');
  const [rideDetails, setRideDetails] = useState(null);
  const [currentLocation, setCurrentLocation] = useState(null);
  const [map, setMap] = useState(null);
  const [markers, setMarkers] = useState({});
  const mapRef = useRef(null);
  const [socket, setSocket] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const newSocket = io('https://fleet-track-dynamics-atlan-production.up.railway.app', {
      query: { token: localStorage.getItem('token') }
    });
    setSocket(newSocket);
    return () => newSocket.close();
  }, []);

  useEffect(() => {
    if (socket) {
      socket.on('locationUpdate', (location) => {
        setCurrentLocation(location);
        updateMarkerPosition('current', location);
      });
    }
  }, [socket]);

  useEffect(() => {
    loadGoogleMapsScript();
  }, []);

  const loadGoogleMapsScript = () => {
    const script = document.createElement('script');
    script.src = `https://maps.gomaps.pro/maps/api/js?key=${API_KEY}&libraries=places`;
    script.async = true;
    script.defer = true;
    script.onload = initMap;
    document.head.appendChild(script);
  };

  const initMap = () => {
    const mapInstance = new window.google.maps.Map(mapRef.current, {
      center: { lat: 0, lng: 0 },
      zoom: 10,
      styles: [
        {
          featureType: "poi",
          elementType: "labels",
          stylers: [{ visibility: "off" }]
        }
      ]
    });
    setMap(mapInstance);
  };

  const fetchRideDetails = async () => {
    setIsLoading(true);
    try {
      const response = await apiCall(`api/v2/bookings/${bookingId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      if (!response.ok) throw new Error('Failed to fetch ride details');
      const data = await response.json();
      setRideDetails(data.booking);
      if (socket) {
        socket.emit('subscribe', bookingId);
      }
      updateMap(data.booking);
    } catch (error) {
      console.error('Error fetching ride details:', error);
      alert('Failed to fetch ride details. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const updateMap = (booking) => {
    if (!map) return;

    const bounds = new window.google.maps.LatLngBounds();
    
    // Add origin marker
    const originMarker = new window.google.maps.Marker({
      position: booking.pickup.coordinates,
      map: map,
      title: 'Pickup',
      label: {
        text: 'P',
        color: 'white',
        fontSize: '14px',
        fontWeight: 'bold'
      },
      icon: {
        path: window.google.maps.SymbolPath.CIRCLE,
        fillColor: '#4CAF50',
        fillOpacity: 1,
        strokeWeight: 0,
        scale: 12
      }
    });
    bounds.extend(booking.pickup.coordinates);
    setMarkers(prev => ({ ...prev, origin: originMarker }));

    // Add destination marker
    const destinationMarker = new window.google.maps.Marker({
      position: booking.dropoff.coordinates,
      map: map,
      title: 'Destination',
      label: {
        text: 'D',
        color: 'white',
        fontSize: '14px',
        fontWeight: 'bold'
      },
      icon: {
        path: window.google.maps.SymbolPath.CIRCLE,
        fillColor: '#F44336',
        fillOpacity: 1,
        strokeWeight: 0,
        scale: 12
      }
    });
    bounds.extend(booking.dropoff.coordinates);
    setMarkers(prev => ({ ...prev, destination: destinationMarker }));

    // Fit map to show both markers
    map.fitBounds(bounds);
  };

  const updateMarkerPosition = (markerType, position) => {
    if (!map) return;

    if (markers[markerType]) {
      markers[markerType].setPosition(position);
    } else {
      const newMarker = new window.google.maps.Marker({
        position: position,
        map: map,
        title: markerType === 'current' ? 'Current Location' : 'Unknown',
        icon: markerType === 'current' ? {
          url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',
          scaledSize: new window.google.maps.Size(40, 40)
        } : null
      });
      setMarkers(prev => ({ ...prev, [markerType]: newMarker }));
    }
  };

  const getDriverLocation = async () => {
    setIsLoading(true);
    try {
      const response = await apiCall(`api/v2/drivers/current-location/${rideDetails._id}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
  
      if (!response.ok) throw new Error('Failed to fetch driver location');
  
      const data = await response.json();
      if (data.success) {
        const driverCoordinates = data.driverLocation;
        const location = {
          lat: driverCoordinates[1],
          lng: driverCoordinates[0]
        };
        updateMarkerPosition('driver', location);
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      console.error('Error fetching driver location:', error);
      alert('Failed to fetch driver location. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded-lg shadow-lg">
      <h2 className="text-3xl font-bold mb-6 text-gray-800">Track My Ride</h2>
      <div className="mb-6">
        <input
          type="text"
          value={bookingId}
          onChange={(e) => setBookingId(e.target.value)}
          placeholder="Enter Booking ID"
          className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button 
          onClick={fetchRideDetails} 
          className="mt-3 w-full p-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition duration-300 ease-in-out"
          disabled={isLoading}
        >
          {isLoading ? 'Loading...' : 'Track Ride'}
        </button>
      </div>
      {rideDetails && (
        <div className="mb-6 p-4 bg-gray-100 rounded-md">
          <p className="mb-2"><strong>From:</strong> {rideDetails.pickup.address}</p>
          <p className="mb-2"><strong>To:</strong> {rideDetails.dropoff.address}</p>
          <p><strong>Status:</strong> <span className="capitalize">{rideDetails.status}</span></p>
        </div>
      )}
      <div ref={mapRef} style={{ width: '100%', height: '400px' }} className="mb-6 rounded-lg overflow-hidden shadow-md"></div>
      {rideDetails && rideDetails.status !== 'completed' && (
        <button 
          onClick={getDriverLocation} 
          className="w-full p-3 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition duration-300 ease-in-out"
          disabled={isLoading}
        >
          {isLoading ? 'Fetching...' : 'Get Driver Location'}
        </button>
      )}
    </div>
  );
};

export default TrackingComponent;

================
File: src/components/User/UserProfile.js
================
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { 
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,
  BarChart, Bar, PieChart, Pie, Cell
} from 'recharts';
import { 
  UserCircle, Truck, Clock, Star, ChartBar, Mail 
} from 'lucide-react';

import Card from '../card';
import { CardContent } from '../cardContent';
import { CardHeader } from '../cardContent';
import { CardTitle } from '../cardContent';
import { CardDescription } from '../cardContent';
import { CardFooter } from '../cardContent';

const UserProfile = () => {
  const { id } = useParams();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Static data for testing
  const staticUserData = {
    username: 'John Doe',
    email: 'john.doe@example.com',
    role: 'driver',
    licenseNumber: 'AB123456',
    experienceYears: 5,
    rideHistory: [
      { date: '2024-01-15', distance: 15, earnings: 20 },
      { date: '2024-02-10', distance: 10, earnings: 15 },
      { date: '2024-03-05', distance: 25, earnings: 30 },
    ],
    earnings: {
      monthly: [
        { month: 'January', amount: 300 },
        { month: 'February', amount: 250 },
        { month: 'March', amount: 400 },
      ],
      total: 950
    },
    ratings: {
      fiveStars: 10,
      fourStars: 5,
      threeStars: 3,
      twoStars: 1,
      oneStar: 1,
      average: 4.5
    },
    vehicles: [
      { id: 1, make: 'Toyota', model: 'Camry', year: 2020, isAvailable: true },
      { id: 2, make: 'Honda', model: 'Civic', year: 2019, isAvailable: false },
    ]
  };

  useEffect(() => {
    // Simulating data fetching
    setTimeout(() => {
      setUser(staticUserData);
      setLoading(false);
    }, 1000);
  }, []);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!user) return <div>User not found</div>;

  const { username, email, role, licenseNumber, experienceYears, rideHistory, earnings, ratings, vehicles } = user;

  const rideData = rideHistory.map(ride => ({
    date: new Date(ride.date).toLocaleDateString(),
    distance: ride.distance,
    earnings: ride.earnings
  }));

  const earningsData = earnings.monthly.map(month => ({
    name: month.month,
    amount: month.amount
  }));

  const ratingData = [
    { name: '5 Stars', value: ratings.fiveStars },
    { name: '4 Stars', value: ratings.fourStars },
    { name: '3 Stars', value: ratings.threeStars },
    { name: '2 Stars', value: ratings.twoStars },
    { name: '1 Star', value: ratings.oneStar },
  ];

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#FF0000'];

  return (
    <div className="container mx-auto p-4">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {/* User Info Card */}
        <Card className="md:col-span-1">
          <CardHeader>
            <CardTitle className="flex items-center">
              <UserCircle className="w-8 h-8 mr-2" />
              {username}
            </CardTitle>
            <CardDescription>{role}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <p className="flex items-center"><Mail className="w-4 h-4 mr-2" /> {email}</p>
              {role === 'driver' && (
                <>
                  <p className="flex items-center"><Truck className="w-4 h-4 mr-2" /> License: {licenseNumber}</p>
                  <p className="flex items-center"><Clock className="w-4 h-4 mr-2" /> Experience: {experienceYears} years</p>
                </>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Earnings Chart */}
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle className="flex items-center">
              <ChartBar className="w-6 h-6 mr-2" />
              Monthly Earnings
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={earningsData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey="amount" stroke="#8884d8" activeDot={{ r: 8 }} />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Ride History */}
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle className="flex items-center">
              <ChartBar className="w-6 h-6 mr-2" />
              Ride History
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={rideData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis yAxisId="left" orientation="left" stroke="#8884d8" />
                <YAxis yAxisId="right" orientation="right" stroke="#82ca9d" />
                <Tooltip />
                <Legend />
                <Bar yAxisId="left" dataKey="distance" fill="#8884d8" name="Distance (km)" />
                <Bar yAxisId="right" dataKey="earnings" fill="#82ca9d" name="Earnings ($)" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Ratings */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Star className="w-6 h-6 mr-2" />
              Ratings
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={ratingData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                >
                  {ratingData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
          <CardFooter>
            <p className="text-sm text-gray-500">Overall Rating: {ratings.average.toFixed(1)} / 5</p>
          </CardFooter>
        </Card>

        {/* Vehicles */}
        {role === 'driver' && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Truck className="w-6 h-6 mr-2" />
                Vehicles
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {vehicles.map(vehicle => (
                  <li key={vehicle.id} className="flex items-center justify-between">
                    <span>{vehicle.make} {vehicle.model} ({vehicle.year})</span>
                    <span className={`px-2 py-1 rounded ${vehicle.isAvailable ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}`}>
                      {vehicle.isAvailable ? 'Available' : 'In Use'}
                    </span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        )}

        {/* Quick Stats */}
        <Card>
          <CardHeader>
            <CardTitle>Quick Stats</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="flex flex-col items-center">
                <h3 className="text-2xl font-bold">${earnings.total}</h3>
                <p>Total Earnings</p>
              </div>
              <div className="flex flex-col items-center">
                <h3 className="text-2xl font-bold">{rideHistory.length}</h3>
                <p>Rides Completed</p>
              </div>
              <div className="flex flex-col items-center">
                <h3 className="text-2xl font-bold">{ratings.average.toFixed(1)}</h3>
                <p>Average Rating</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default UserProfile;

================
File: src/config/api.js
================
export const API_BASE_URL = 'api/v2';

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/Pages/Home.js
================
import React, { useEffect, useRef, useState } from 'react';
import { motion, useAnimation, useScroll, useTransform } from 'framer-motion';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { Swiper, SwiperSlide } from 'swiper/react';
import 'swiper/css';
import 'swiper/css/effect-coverflow';
import 'swiper/css/pagination';
import { EffectCoverflow, Pagination, Autoplay } from 'swiper/modules';

gsap.registerPlugin(ScrollTrigger);

const Home = () => {
  const controls = useAnimation();
  const [currentSection, setCurrentSection] = useState(0);
  const sectionsRef = useRef([]);
  const textRef = useRef(null);
  const { scrollYProgress } = useScroll();
  const y = useTransform(scrollYProgress, [0, 1], ['0%', '100%']);

  useEffect(() => {
    const sections = sectionsRef.current;
    sections.forEach((section, index) => {
      gsap.to(section, {
        scrollTrigger: {
          trigger: section,
          start: 'top center',
          end: 'bottom center',
          onEnter: () => setCurrentSection(index),
          onEnterBack: () => setCurrentSection(index),
        },
      });
    });

    // Text reveal animation
    const letters = textRef.current.innerText.split('');
    textRef.current.innerHTML = '';
    letters.forEach((letter) => {
      const span = document.createElement('span');
      span.innerText = letter;
      span.style.opacity = '0';
      textRef.current.appendChild(span);
    });

    gsap.to(textRef.current.children, {
      opacity: 1,
      stagger: 0.05,
      scrollTrigger: {
        trigger: textRef.current,
        start: 'top 80%',
      },
    });

    controls.start({ opacity: 1, y: 0 });
  }, [controls]);

  const services = [
    { title: 'Full Truckload', description: 'Efficient transportation for large shipments' },
    { title: 'Less Than Truckload', description: 'Cost-effective solutions for smaller freight' },
    { title: 'Intermodal', description: 'Combining truck, rail, and sea transport' },
    { title: 'Specialized Freight', description: 'Handling oversized or sensitive cargo' },
    { title: 'Expedited Shipping', description: 'Fast delivery for time-critical shipments' },
    { title: 'Last Mile Delivery', description: 'Ensuring your goods reach their final destination' },
    { title: 'Real-Time Tracking', description: 'Track your shipment live with accurate GPS' },
    { title: 'Flexible Scheduling', description: 'Schedule future or immediate bookings with ease' }
  ];

  const features = [
    { title: 'Real-Time Tracking', description: 'Monitor your shipments 24/7 with precision GPS tracking' },
    { title: 'AI-Powered Routing', description: 'Optimize routes with machine learning for faster deliveries' },
    { title: 'Sustainable Solutions', description: 'Eco-friendly options to reduce your carbon footprint' },
    { title: 'Customs Clearance', description: 'Seamless international shipping with expert customs handling' },
    { title: 'Surge Pricing', description: 'Dynamic pricing based on real-time demand and distance' },
    { title: 'Instant Price Estimates', description: 'Get upfront pricing before booking your shipment' }
  ];

  const testimonials = [
    { name: 'John Doe', feedback: 'Logitrax Express streamlined our logistics, saving us both time and money.' },
    { name: 'Jane Smith', feedback: 'The real-time tracking feature gave me peace of mind knowing my shipment was safe.' },
    { name: 'Acme Corp', feedback: 'Weve seen a significant improvement in delivery times thanks to the AI routing system.' }
  ];

  const clients = [
    { name: 'Amazon', logo: '/amazon.png' },
    { name: 'Walmart', logo: '/walmart.png' },
    { name: 'Target', logo: '/target.png' },
    { name: 'FedEx', logo: '/fedex.png' },
    { name: 'UPS', logo: '/fedex.png' },
    { name: 'DHL', logo: '/dhl.png' },
  ];

  const investors = [
    { name: 'Sequoia Capital', logo: '/amazon.png' },
    { name: 'Andreessen Horowitz', logo: '/walmart.png' },
    { name: 'Y Combinator', logo: '/fedex.png' },
    { name: 'Softbank', logo: '/dhl.png' },
  ];


  return (
    <div className="bg-white text-black font-sans overflow-hidden">
      {/* Hero Section */}
      <section id="home" className="relative h-screen flex items-center justify-center" ref={(el) => (sectionsRef.current[0] = el)}>
        <div className="absolute inset-0 z-0">
          <img src='/truck1.jpeg' alt="Truck at sunset" className="w-full h-full object-cover" />
          <div className="absolute inset-0 bg-black opacity-50"></div>
        </div>
        <motion.div
          className="z-10 text-center px-4 max-w-4xl"
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1, delay: 0.5 }}
        >
          <h1 className="text-5xl md:text-7xl font-bold mb-6 font-serif text-white" ref={textRef}>
            Logitrax Express
          </h1>
          <p className="text-xl md:text-2xl mb-8 font-light text-white">
            Revolutionizing logistics with cutting-edge technology and unparalleled service
          </p>
          <motion.button 
            className="bg-[#4A0E4E] text-white font-bold py-4 px-10 rounded-full text-lg hover:bg-[#3A0C3E] transition duration-300 shadow-lg"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            Get Started
          </motion.button>
        </motion.div>
   <motion.div
          className="absolute bottom-10 left-1/2 transform -translate-x-1/2"
          animate={{ y: [0, 10, 0] }}
          transition={{ repeat: Infinity, duration: 1.5 }}
        >
          <svg className="w-6 h-6 text-white" fill="none" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" stroke="currentColor">
            <path d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        </motion.div>      </section>

      {/* Services Section */}
      <section id="services" className="py-20 px-4 md:px-8 bg-white" ref={(el) => (sectionsRef.current[1] = el)}>
        <div className="container mx-auto">
          <motion.h2
            className="text-4xl md:text-5xl font-bold mb-16 text-center font-serif text-black"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            Our Services
          </motion.h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {services.map((service, index) => (
              <motion.div
                key={index}
                className="bg-gray-100 p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300"
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <h3 className="text-2xl font-semibold mb-3 text-black">{service.title}</h3>
                <p className="text-gray-700">{service.description}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Feature Highlight Section */}
      <section id="features" className="py-20 relative" ref={(el) => (sectionsRef.current[2] = el)}>
        <div className="absolute inset-0 z-0">
          <img src='/truck3.jpeg' alt="Truck fleet" className="w-full h-full object-cover" />
          <div className="absolute inset-0 bg-[#4A0E4E] opacity-80"></div>
        </div>
        <div className="container mx-auto px-4 md:px-8 relative z-10">
          <motion.h2
            className="text-4xl md:text-5xl font-bold mb-16 text-center font-serif text-white"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            Why Choose Logitrax Express
          </motion.h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {features.map((feature, index) => (
              <motion.div
                key={index}
                className="bg-white bg-opacity-10 p-6 rounded-lg backdrop-filter backdrop-blur-lg"
                initial={{ opacity: 0, x: index % 2 === 0 ? -50 : 50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <h3 className="text-2xl font-semibold mb-3 text-white">{feature.title}</h3>
                <p className="text-gray-200">{feature.description}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

     
      {/* Clients Section */}
      <section id="clients" className="py-20 bg-gray-900" ref={(el) => (sectionsRef.current[3] = el)}>
        <div className="container mx-auto px-4 md:px-8">
          <motion.h2
            className="text-4xl md:text-5xl font-bold mb-16 text-white text-center font-serif"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            Our Notable Clients
          </motion.h2>
          <Swiper
            effect={'coverflow'}
            grabCursor={true}
            centeredSlides={true}
            slidesPerView={'auto'}
            coverflowEffect={{
              rotate: 50,
              stretch: 0,
              depth: 100,
              modifier: 1,
              slideShadows: true,
            }}
            pagination={true}
            modules={[EffectCoverflow, Pagination, Autoplay]}
            className="mySwiper"
            autoplay={{
              delay: 2500,
              disableOnInteraction: false,
            }}
          >
            {clients.map((client, index) => (
              <SwiperSlide key={index}>
                <div className="bg-white p-8 rounded-lg shadow-lg">
                  <img src={client.logo} alt={client.name} className="w-32 h-32 mx-auto object-contain" />
                  <h3 className="text-xl font-semibold text-center mt-4 text-gray-800">{client.name}</h3>
                </div>
              </SwiperSlide>
            ))}
          </Swiper>
        </div>
      </section>

      {/* Investors Section */}
      <section className="py-20 bg-gray-800" ref={(el) => (sectionsRef.current[4] = el)}>
        <div className="container mx-auto px-4 md:px-8">
          <motion.h2
            className="text-4xl md:text-5xl font-bold mb-16 text-white text-center font-serif"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            Our Investors
          </motion.h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            {investors.map((investor, index) => (
              <motion.div
                key={index}
                className="bg-white p-6 rounded-lg shadow-lg"
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <img src={investor.logo} alt={investor.name} className="w-24 h-24 mx-auto object-contain" />
                <h3 className="text-lg font-semibold text-center mt-4 text-gray-800">{investor.name}</h3>
              </motion.div>
            ))}
            </div>
        </div>
      </section>
      {/* Testimonials Section */}
      <section className="py-20 bg-white" ref={(el) => (sectionsRef.current[5] = el)}>
        <div className="container mx-auto px-4 md:px-8">
          <motion.h2
            className="text-4xl md:text-5xl font-bold mb-16 text-center font-serif text-black"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            What Our Clients Say
          </motion.h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {testimonials.map((testimonial, index) => (
              <motion.div
                key={index}
                className="text-center"
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <div className="text-xl text-gray-600 mb-2">"{testimonial.feedback}"</div>
                <div className="text-lg font-bold text-[#4A0E4E]">{testimonial.name}</div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section id="contact" className="py-20 relative" ref={(el) => (sectionsRef.current[6] = el)}>
        <div className="absolute inset-0 z-0">
          <img src='/truck2.jpeg' alt="Truck driving at night" className="w-full h-full object-cover" />
          <div className="absolute inset-0 bg-black opacity-70"></div>
        </div>
        <div className="container mx-auto text-center px-4 md:px-8 relative z-10">
          <motion.h2
            className="text-4xl md:text-5xl font-bold mb-8 font-serif text-white"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            Ready to Transform Your Logistics?
          </motion.h2>
          <motion.p
            className="text-xl mb-8 max-w-2xl mx-auto text-gray-300"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            Join thousands of businesses that trust Logitrax Express for their shipping needs. Experience the future of logistics today.
          </motion.p>
          <motion.button 
            className="bg-[#4A0E4E] text-white font-bold py-4 px-10 rounded-full text-lg hover:bg-[#3A0C3E] transition duration-300 flex items-center mx-auto"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            Get Started Now
            <svg className="w-6 h-6 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </motion.button>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12">
        <div className="container mx-auto grid grid-cols-1 md:grid-cols-4 gap-8 px-4 md:px-8">
          <div>
            <h3 className="text-2xl font-bold mb-4 font-serif">Logitrax Express</h3>
            <p className="text-gray-400">
              Revolutionizing logistics with technology. Offering comprehensive services from full truckload to last mile
              delivery. Track your shipment and optimize your logistics with AI-powered solutions.
            </p>
          </div>
          <div>
            <h3 className="text-xl font-semibold mb-4">Services</h3>
            <ul>
              {services.slice(0, 4).map((service, index) => (
                <li key={index} className="text-gray-400 mb-2">
                  {service.title}
                </li>
              ))}
            </ul>
          </div>
          <div>
            <h3 className="text-xl font-semibold mb-4">Features</h3>
            <ul>
              {features.slice(0, 4).map((feature, index) => (
                <li key={index} className="text-gray-400 mb-2">
                  {feature.title}
                </li>
              ))}
            </ul>
          </div>
          <div>
            <h3 className="text-xl font-semibold mb-4">Contact Us</h3>
            <p className="text-gray-400 mb-4">
              Have questions or need assistance? Reach out to our support team.
            </p>
            <p className="text-gray-400">
              Email: <a href="mailto:support@Logitrax Express.com" className="text-blue-400">support@Logitrax Express.com</a>
            </p>
            <p className="text-gray-400">
              Phone: <a href="tel:+18001234567" className="text-blue-400">+1 (800) 123-4567</a>
            </p>
          </div>
        </div>
        <div className="text-center text-gray-600 mt-8">
          &copy; 2024 Logitrax Express. All Rights Reserved.
        </div>
      </footer>

      {/* Floating Action Button */}
      <motion.div
        className="fixed bottom-8 right-8 z-50"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
      >
        <button
          className="bg-[#4A0E4E] text-white rounded-full p-4 shadow-lg hover:bg-[#3A0C3E] transition duration-300"
          onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
          </svg>
        </button>
      </motion.div>

      {/* Parallax Background */}
      <motion.div
        className="fixed inset-0 z-[-1] opacity-10"
        style={{ y }}
      >
        <img src="/pattern.png" alt="Background pattern" className="w-full h-full object-cover" />
      </motion.div>
    </div>
  );
};

export default Home;

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html",
  ],
  theme: {
    extend: {
      fontFamily: {
        'playfair': ['Playfair Display', 'serif'],
        'montserrat': ['Montserrat', 'sans-serif'],
      },
      colors: {
        'gold': '#FFD700',
      },
    },
  },
  plugins: [],
}
